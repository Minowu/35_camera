import cv2
import time
import threading
import numpy as np

class CameraThread(threading.Thread):
    """Thread x·ª≠ l√Ω m·ªôt camera"""
    
    def __init__(self, cam_name, cam_url, local_dict, max_retry_attempts=5):
        """
        Args:
            cam_name: T√™n camera
            cam_url: URL/ID camera
            local_dict: Dict local trong process
            max_retry_attempts: S·ªë l·∫ßn th·ª≠ k·∫øt n·ªëi l·∫°i t·ªëi ƒëa (m·∫∑c ƒë·ªãnh: 5)
        """
        super().__init__(daemon=True)
        self.cam_name = cam_name
        self.cam_url = cam_url
        self.local_dict = local_dict
        self.running = False
        self.max_retry_attempts = max_retry_attempts
        self.retry_count = 0
        self.last_successful_connection = None
    
    def _try_connect_camera(self, timeout=5.0):
        """
        Th·ª≠ k·∫øt n·ªëi camera v·ªõi timeout
        
        Returns:
            cv2.VideoCapture: ƒê·ªëi t∆∞·ª£ng camera n·∫øu k·∫øt n·ªëi th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
        """
        print(f"üîÑ ƒêang k·∫øt n·ªëi camera {self.cam_name}... (l·∫ßn th·ª≠ {self.retry_count + 1}/{self.max_retry_attempts})")
        
        cap = cv2.VideoCapture(self.cam_url)
        start_time = time.time()
        
        while not cap.isOpened() and (time.time() - start_time) < timeout:
            time.sleep(0.1)
            cap = cv2.VideoCapture(self.cam_url)
        
        if cap.isOpened():
            print(f"‚úÖ Camera {self.cam_name} ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng")
            self.retry_count = 0  # Reset retry count khi k·∫øt n·ªëi th√†nh c√¥ng
            self.last_successful_connection = time.time()
            return cap
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi camera {self.cam_name} (timeout {timeout}s)")
            return None
    
    def _handle_connection_failure(self):
        """X·ª≠ l√Ω khi k·∫øt n·ªëi camera th·∫•t b·∫°i"""
        self.retry_count += 1
        
        if self.retry_count >= self.max_retry_attempts:
            print(f"üíÄ Camera {self.cam_name} ƒë√£ th·ª≠ k·∫øt n·ªëi {self.max_retry_attempts} l·∫ßn nh∆∞ng th·∫•t b·∫°i. D·ª´ng th·ª≠ l·∫°i.")
            self.local_dict[self.cam_name] = {
                'frame': None,
                'ts': time.time(),
                'status': 'connection_failed',
                'retry_count': self.retry_count,
                'last_attempt': time.time()
            }
            return False
        else:
            # T√≠nh th·ªùi gian ch·ªù tƒÉng d·∫ßn (exponential backoff)
            wait_time = min(2 ** self.retry_count, 30)  # T·ªëi ƒëa 30 gi√¢y
            print(f"‚è≥ Camera {self.cam_name} s·∫Ω th·ª≠ k·∫øt n·ªëi l·∫°i sau {wait_time} gi√¢y...")
            
            self.local_dict[self.cam_name] = {
                'frame': None,
                'ts': time.time(),
                'status': 'retrying',
                'retry_count': self.retry_count,
                'next_retry_in': wait_time
            }
            
            time.sleep(wait_time)
            return True
        
    def run(self):
        """V√≤ng l·∫∑p ch√≠nh ƒë·ªçc frame li√™n t·ª•c"""
        self.running = True
        
        # Th·ª≠ k·∫øt n·ªëi camera ban ƒë·∫ßu
        cap = self._try_connect_camera()
        if cap is None:
            # Th·ª≠ k·∫øt n·ªëi l·∫°i n·∫øu th·∫•t b·∫°i
            while self.running and self.retry_count < self.max_retry_attempts:
                if not self._handle_connection_failure():
                    return  # ƒê√£ th·ª≠ h·∫øt s·ªë l·∫ßn cho ph√©p
                
                cap = self._try_connect_camera()
                if cap is not None:
                    break  # K·∫øt n·ªëi th√†nh c√¥ng
        
        while self.running:
            try:
                ret, frame = cap.read()
                if not ret:
                    # Camera m·∫•t t√≠n hi·ªáu - th·ª≠ k·∫øt n·ªëi l·∫°i
                    print(f"‚ö†Ô∏è Camera {self.cam_name} m·∫•t t√≠n hi·ªáu, th·ª≠ k·∫øt n·ªëi l·∫°i...")
                    cap.release()
                    
                    # Th·ª≠ k·∫øt n·ªëi l·∫°i
                    cap = self._try_connect_camera()
                    if cap is None:
                        # N·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c, th·ª≠ retry
                        if not self._handle_connection_failure():
                            return  # ƒê√£ th·ª≠ h·∫øt s·ªë l·∫ßn cho ph√©p
                        continue
                    else:
                        print(f"üîÑ Camera {self.cam_name} ƒë√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng")
                        continue
                
               # Th√™m frame skipping
                frame_count = 0
                if frame_count % 2 == 0:  # Ch·ªâ encode 1/2 frame
                    _, buffer = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 70])
                    jpeg_bytes = buffer.tobytes()
                else:
                    jpeg_bytes = None  # Skip frame n√†y
                
                frame_count += 1
                
                # L∆∞u v√†o local_dict
                self.local_dict[self.cam_name] = {
                    'frame': jpeg_bytes,
                    'ts': time.time(),
                    'status': 'ok'
                }
                
            except Exception as e:
                print(f"‚ùå L·ªói camera {self.cam_name}: {e}")
                cap.release()
                
                # Th·ª≠ k·∫øt n·ªëi l·∫°i sau l·ªói
                cap = self._try_connect_camera()
                if cap is None:
                    # N·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c, th·ª≠ retry
                    if not self._handle_connection_failure():
                        return  # ƒê√£ th·ª≠ h·∫øt s·ªë l·∫ßn cho ph√©p
                    continue
                else:
                    print(f"üîÑ Camera {self.cam_name} ƒë√£ k·∫øt n·ªëi l·∫°i sau l·ªói")
                    continue
                
        cap.release()
    
    def stop(self):
        """D·ª´ng thread"""
        self.running = False